// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	logs "immersive-dashboard/features/logs"

	mock "github.com/stretchr/testify/mock"
)

// LogData is an autogenerated mock type for the LogService type
type LogData struct {
	mock.Mock
}

// AddLogSrv provides a mock function with given fields: newLog
func (_m *LogData) AddLogSrv(newLog logs.Core) error {
	ret := _m.Called(newLog)

	var r0 error
	if rf, ok := ret.Get(0).(func(logs.Core) error); ok {
		r0 = rf(newLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLogSrv provides a mock function with given fields: id, page
func (_m *LogData) GetLogSrv(id int, page int) ([]logs.Core, error) {
	ret := _m.Called(id, page)

	var r0 []logs.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]logs.Core, error)); ok {
		return rf(id, page)
	}
	if rf, ok := ret.Get(0).(func(int, int) []logs.Core); ok {
		r0 = rf(id, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logs.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogData interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogData creates a new instance of LogData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogData(t mockConstructorTestingTNewLogData) *LogData {
	mock := &LogData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
