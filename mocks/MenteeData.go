// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	mentees "immersive-dashboard/features/mentees"

	mock "github.com/stretchr/testify/mock"
)

// MenteeData is an autogenerated mock type for the MenteeDataInterface type
type MenteeData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: data, id
func (_m *MenteeData) Delete(data mentees.Core, id uint) error {
	ret := _m.Called(data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(mentees.Core, uint) error); ok {
		r0 = rf(data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *MenteeData) Insert(input mentees.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(mentees.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: id
func (_m *MenteeData) Select(id uint) (mentees.Core, error) {
	ret := _m.Called(id)

	var r0 mentees.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (mentees.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) mentees.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(mentees.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: limit, offset, class, status, category, name
func (_m *MenteeData) SelectAll(limit int, offset int, class string, status string, category string, name string) ([]mentees.Core, error) {
	ret := _m.Called(limit, offset, class, status, category, name)

	var r0 []mentees.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string) ([]mentees.Core, error)); ok {
		return rf(limit, offset, class, status, category, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string) []mentees.Core); ok {
		r0 = rf(limit, offset, class, status, category, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentees.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string, string, string) error); ok {
		r1 = rf(limit, offset, class, status, category, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *MenteeData) Update(input mentees.Core, id uint) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(mentees.Core, uint) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeData interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeData creates a new instance of MenteeData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeData(t mockConstructorTestingTNewMenteeData) *MenteeData {
	mock := &MenteeData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
