// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	users "immersive-dashboard/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserData type
type UserData struct {
	mock.Mock
}

// DeleteData provides a mock function with given fields: id
func (_m *UserData) DeleteData(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMentorData provides a mock function with given fields:
func (_m *UserData) GetMentorData() ([]users.Core, error) {
	ret := _m.Called()

	var r0 []users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]users.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []users.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *UserData) GetUser(_a0 int, _a1 string) ([]users.Core, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) ([]users.Core, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, string) []users.Core); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginData provides a mock function with given fields: email
func (_m *UserData) LoginData(email string) (users.Core, error) {
	ret := _m.Called(email)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.Core, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) users.Core); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileData provides a mock function with given fields: id
func (_m *UserData) ProfileData(id int) (users.Core, error) {
	ret := _m.Called(id)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (users.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) users.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterData provides a mock function with given fields: newUser
func (_m *UserData) RegisterData(newUser users.Core) error {
	ret := _m.Called(newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserData provides a mock function with given fields: id, newUser
func (_m *UserData) UpdateUserData(id int, newUser users.Core) error {
	ret := _m.Called(id, newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, users.Core) error); ok {
		r0 = rf(id, newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
